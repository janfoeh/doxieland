#!/usr/bin/env ruby
require "doxieland"
require "thor"
require "ruby-progressbar"
require 'hirb'

class CLI < Thor
  include Thor::Actions

  class_option 'scanner-ip', desc:'your scanners network address', banner: 'xxx.xxx.xxx.xxx', type: :string, aliases: '-i'
  class_option :password, desc:'your scanners password', type: :string, aliases: '-p'

  def initialize(*args, **kargs)
    super

    @config = (options || HashWithIndifferentAccess.new).reverse_merge(Doxieland.config)
    @client = Doxieland::Client.new(@config)
  end

  desc "info", "show information about your scanner"
  def info
    response =
      @client.api do |api|
        api.get_info.result
      end

      puts Hirb::Helpers::AutoTable.render(
          response,
          description:  false,
          headers:      false
        )
  end

  desc "list", "list all scans saved in your scanners memory"
  def list
    scans = @client.api { |api| api.list_scans.result }

    puts Hirb::Helpers::AutoTable.render(
      scans,
      fields: [:name, :path],
      description: false
    )
  end

  desc "download", <<-EOT.strip_heredoc
    download all scans from your scanner to your computer

    Available placeholders for filename format strings:
      %{number} - the image number
      %{date} - the current date as DD.MM.YYYY
      %{time} - the current time as HH:MM:SS

    You can further format date and time by passing format options inside the placeholders, separated by a colon:

      %{date:%Y-%m-%d}

    See http://ruby-doc.org/core-2.2.0/Time.html#method-i-strftime for all available date and time formatting options.

  EOT
  method_option :to, desc: "the directory to save the scans to. Defaults to .", type: :string, aliases: '-t'
  method_option :filenames,
                type: :string,
                aliases: '-f',
                banner: '"FORMAT_STRING"',
                desc: 'filename format string. Default: "doxie_scan_%{number}"'
  method_option :delete, desc: "delete downloaded scans from scanner", type: :boolean, aliases: '-d'
  def download
    @client.create_save_path

    Doxieland::Scan.save_path   = @client.save_path
    Doxieland::Scan.name_format = @config[:filenames] if @config[:filenames]

    scans = @client.api do |api|
      api.list_scans.result
    end


    deletable_paths = []

    scans.each do |remote_scan|
      scan = @client.api { |api| api.get_scan(path: remote_scan[:path]).result }

      if scan.save
        puts "downloaded scan #{scan.path}"
        deletable_paths << remote_scan[:delete_path]
      else
        puts "skipped existing file #{scan.path}"
      end
    end

    if options[:delete] && deletable_paths.any?
      puts "deleting downloaded scans"
      @client.api { |api| api.delete_scans(paths: deletable_paths).result }
    end
  end

  desc "defaults", "show or set default options for doxieland"
  def defaults
    if options.none?
      config = Doxieland.config

      if config.any?
        puts Hirb::Helpers::AutoTable.render(
            config,
            description:  false,
            headers:      { 0 => 'option', 1 => 'value' }
          )
      else
        puts "no defaults set"
      end

    else
      File.open(Doxieland.config_path, 'w') { |file| file << YAML.dump(options) }
    end
  end

  desc "console", "starts a Pry REPL session", hide: true
  def console
    begin
      require 'pry'
    rescue LoadError
      puts "doxieland console requires Pry to be installed: gem install pry"
      exit
    end
    binding.pry
  end
end

CLI.start( ARGV.any? ? ARGV : ['help'] )